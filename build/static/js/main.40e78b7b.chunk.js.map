{"version":3,"sources":["components/dock-div.js","components/boat.js","components/harbour-div.js","components/bay-div.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["DockBlock","styled","div","_templateObject","DockDiv","react_default","a","createElement","Component","left","keyframes","boat_templateObject","BoatBase","_templateObject2","props","concat","top","boatType","SpeedBoat","_templateObject3","process","SailBoat","_templateObject4","CargoBoat","_templateObject5","Boat","this","type","item","HarbourBlock","harbour_div_templateObject","HarbourDiv","boatList","map","i","boat","key","BayBlock","bay_div_templateObject","BayDiv","MainHarbour","main","main_templateObject","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","BayList","HarbourWaitingList","harbourBoat","_this2","timerID","setInterval","tick","clearInterval","Math","floor","random","spawnBoat","moveBayBoats","harbourControl","moveHarbourBoats","length","id","shift","find","guid","setState","prevState","filter","console","log","waiting","_this3","forEach","speed","BoatReturn","toConsumableArray","chance","S4","toString","substring","_this4","index","push","dock_div","harbour_div","bay_div","App","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40e78b7b.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\n/**\r\n * \r\n * Simple place holder Dock for Dock type things..... don't judge me on the use of bisque\r\n */\r\nconst DockBlock = styled.div`\r\n    background-color: bisque;\r\n`\r\n\r\n/**\r\n * Dock React class for rendering.... not much else to say for now.\r\n */\r\nclass DockDiv extends Component {\r\n    render() {\r\n        return (\r\n            <DockBlock></DockBlock>\r\n        )\r\n    }\r\n} \r\n\r\nexport default DockDiv","import React, {Component} from 'react'\r\nimport styled, {keyframes} from 'styled-components'\r\n/**\r\n * \r\n * Boat renders the correct boat at the correct speed all boats created on screen are \r\n * handled here. We use react props for different boats and main adds the location for this to be placed on the page. \r\n */\r\n\r\n/**\r\n * left handles keyframe animation for all boats\r\n */\r\nconst left = keyframes`\r\n  from {\r\n    left: 90%;\r\n  }\r\n\r\n  to {\r\n    left: 0%\r\n  }\r\n`;\r\n\r\n/**\r\n * BoatBase styled component takes props information for creating the containers that the boats live in.\r\n */\r\n\r\nconst BoatBase = styled.div`\r\n    top: ${props => `${props.top}px`} ;\r\n    left: 90%;\r\n    position: absolute;\r\n    animation: ${left} ${props => {\r\n        if(props.boatType === \"speedBoat\") {\r\n            return \"1s\"\r\n        } else if (props.boatType === \"sailBoat\"){\r\n           return \"4s\"\r\n        } else if (props.boatType === \"cargoBoat\") {\r\n           return \"16s\"\r\n        }\r\n    }} linear 1;\r\n    animation-fill-mode: forwards;\r\n    display: inline;\r\n    z-index:2;\r\n`\r\n/**\r\n * SpeedBoat adds the correct image for speed boats and alters size slightly\r\n */\r\nconst SpeedBoat = styled.div`\r\n    background: url(\"${process.env.PUBLIC_URL}/img/speedboat.png\") no-repeat center;\r\n    background-size: cover;\r\n    height: 50px;\r\n    width: 100px;\r\n`\r\n/**\r\n * SailBoat adds the correct image for Sail boats and alters size slightly\r\n */\r\nconst SailBoat = styled.div`\r\n    background: url(\"${process.env.PUBLIC_URL}/img/sailboat.png\") no-repeat center;\r\n    background-size:cover;\r\n    height: 100px;\r\n    width: 100px;\r\n`\r\n/**\r\n * CargoBoat adds the correct image for Cargo boats and alters size slightly\r\n */\r\nconst CargoBoat = styled.div`\r\n    background: url(\"${process.env.PUBLIC_URL}/img/cargo.png\") no-repeat  center;\r\n    background-size:cover;\r\n    height: 75px;\r\n    width: 150px;\r\n`\r\n\r\n/**\r\n * Boat React Class\r\n * creates the correct boat from props passed to it from Harbour-div and bay-div\r\n */\r\nclass Boat extends Component {\r\n\r\n    /**\r\n     * Separated out which boat is needed during render \r\n     * */    \r\n    item() {\r\n        if (this.props.boatType.type === \"speedBoat\"){\r\n            return <SpeedBoat></SpeedBoat>\r\n        }else if(this.props.boatType.type === \"sailBoat\"){\r\n            return <SailBoat></SailBoat>\r\n        } else {\r\n            return <CargoBoat></CargoBoat>\r\n        } \r\n    }\r\n    /**\r\n     * Render add the object to the page\r\n     */\r\n    render() {\r\n        return (\r\n            <BoatBase boatType={this.props.boatType.type} top={this.props.boatType.top} left={this.props.boatType.left}>\r\n                {this.item()}\r\n            </BoatBase>\r\n        )\r\n    }\r\n} \r\n\r\nexport default Boat","import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\nimport Boat from './boat'\r\n\r\n\r\n/**\r\n * HarbourBlock with a soothing light blue to represent the harbour \r\n * More water effects to be added later\r\n */\r\nconst HarbourBlock = styled.div`\r\n    background-color: lightblue;\r\n    height: calc(100vh);\r\n    max-height: calc(100vh);\r\n    position: relative;\r\n`\r\n\r\n/**\r\n * HarbourDiv react class to handle the one boat with permission to enter the harbour\r\n * takes the information from the harbourBoat state in Main\r\n */\r\nclass HarbourDiv extends Component {\r\n    render() {\r\n        return (\r\n            <HarbourBlock>\r\n                 {this.props.boatList.map((item, i ) => <Boat boatType={item} key={i} />)}\r\n            </HarbourBlock>\r\n        )\r\n    }\r\n} \r\n\r\nexport default HarbourDiv","import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\nimport Boat from \"./boat\"\r\n\r\n/**\r\n * BayBlock styled component. Nice default dark blue to represent the bay.\r\n * Plan to update this to make the water look nicer\r\n */\r\n\r\nconst BayBlock = styled.div`\r\n    background-color: Darkblue;\r\n    height: calc(100vh);\r\n    max-height: calc(100vh);\r\n    position: relative;\r\n`\r\n\r\n/**\r\n * BayDiv React Class for handling all of the boats in the Bay.\r\n * it uses the BayList from Main through props to handle them all \r\n */\r\nclass BayDiv extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <BayBlock>\r\n               {this.props.boatList.map((item, i ) => <Boat boatType={item} key={i} />)}\r\n            </BayBlock>\r\n        )\r\n    }\r\n} \r\n\r\nexport default BayDiv","import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\nimport DockBlock from \"./dock-div\"\r\nimport HarbourBlock from \"./harbour-div\"\r\nimport BayBlock from \"./bay-div\"\r\n\r\n/**\r\n * MainHarbour style using styled components \r\n * Grid chosen as it is quick and easy.\r\n */\r\nconst MainHarbour = styled.main`\r\n    display: grid;\r\n    grid-template-columns: .25fr .5fr 1fr;\r\n    grid-template-rows: 1fr;\r\n    height: calc(100vh);\r\n    position: relative;\r\n`\r\n    /** \r\n     * Main handles the logic of the Application.\r\n     * All State information is stored here and this is where we would add the info to a Database if time allowed.\r\n     * \r\n    */\r\nclass Main extends Component {\r\n\r\n    /**\r\n     * Simple constructor with state\r\n     * BayList: Has an array of all of the boat in the bay.\r\n     * HarbourWaitingList holds the id's of the items waiting to enter the harbour.\r\n     * harbourBoat is an array to keep it the same data type BayList to handle boats\r\n     * It should hold only one value at any one time.\r\n     */\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            BayList: [],\r\n            HarbourWaitingList:[],\r\n            harbourBoat: []\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * CompontDidmount part of the React Life Cycle sets the timer for us. \r\n     * \r\n     * I set it to once per second to stop over refreshes\r\n     */\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    /**\r\n     * componentWillUnmount another lifecycle method for clean up.\r\n     */\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    /**\r\n     * tick()\r\n     * used for the movement every Second \r\n     * It handles the spawn boat timings and the harbour control.\r\n     */\r\n\r\n    tick() {\r\n        if (Math.floor(Math.random() * Math.floor(10)) < 1) {\r\n            this.spawnBoat()\r\n        }\r\n        this.moveBayBoats()\r\n        this.harbourControl()\r\n        this.moveHarbourBoats()\r\n    }\r\n\r\n     /**\r\n     * harbourControl()\r\n     * Harbour control is set to take the first item from the HarbourWaitingList array and move it to the harbour.\r\n     * item is set to the first item as there should only be one item in the array at any time. \r\n     */\r\n    harbourControl() {\r\n        if(this.state.HarbourWaitingList.length > 0 && this.state.harbourBoat.length <= 0) {\r\n            let id = this.state.HarbourWaitingList.shift()\r\n            let item = [this.state.BayList.find(boat => boat.guid === id )]\r\n            this.setState(prevState=> ({BayList: prevState.BayList.filter(boat => boat.guid !== id)}))\r\n            console.log(item)\r\n            item[0].left = 90\r\n            item[0].waiting = false\r\n            this.setState({harbourBoat: item})\r\n        }\r\n    }\r\n\r\n    /**\r\n     * moveHarbourBoats() moves the boast in the harbour, this is only a logic value as time wouldn't allow me to set it to the boats animation\r\n     * Currently logic and graphics are slightly out but close enough.\r\n     */\r\n    moveHarbourBoats(){\r\n        this.setState(prevState => {\r\n            prevState.harbourBoat.forEach((boat) => {\r\n                if (boat.left - boat.speed <= 0) {\r\n                        this.setState({harbourBoat: []})\r\n                }\r\n                 else {\r\n                    boat.left -= boat.speed\r\n                }\r\n            })\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * spawnBoat() adds a boat to the BayList, this is called once every 10 time every second \r\n     */\r\n    spawnBoat() {\r\n        let type = this.BoatReturn()\r\n        this.setState(prevState => ({\r\n            BayList: [...prevState.BayList, type]\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * BoatReturn() creates a boat for spawnBoat() it adds a random id to every boat for tracking.\r\n     * this is sort of my odd database tracking without the database\r\n     */\r\n\r\n    BoatReturn() {\r\n        let top = Math.floor(Math.random() * Math.floor(850))\r\n        let chance = Math.floor(Math.random() * Math.floor(3))\r\n        let guid = () => {\r\n            let S4 = () => {\r\n               return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n            };\r\n            return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n        }\r\n        if (chance === 0) {\r\n            return {guid: guid(), type: \"speedBoat\", top: top, left: 90, speed: 30, waiting:false}\r\n        } else if (chance === 1) {\r\n            return {guid: guid(),type: \"sailBoat\", top: top, left: 90, speed: 15, waiting:false}\r\n        } else {\r\n            return {guid: guid(), type: \"cargoBoat\", top: top, left: 90, speed: 5, waiting:false}\r\n        }\r\n    }\r\n\r\n     /**\r\n     * moveBayBoats()moves \"the boat in the bay, and watches the time roll away\"\r\n     * Also adds the boats to the HarbourWaitingList when the reach the Harbour\r\n     */\r\n\r\n    moveBayBoats() {\r\n        this.setState(prevState => {\r\n            prevState.BayList.forEach((boat, index) => {\r\n                if (boat.left - boat.speed <= 0) {\r\n                    if (!boat.waiting){\r\n                        boat.left = 0\r\n                        this.state.HarbourWaitingList.push(boat.guid)\r\n                        boat.waiting = true\r\n                    }\r\n\r\n                } else {\r\n                    boat.left -= boat.speed\r\n                }\r\n            })\r\n        })\r\n    }\r\n      \r\n    /**\r\n     * Render adds the 3 items to the page\r\n     * DockBlock a fake dock\r\n     * HarbourBlock for the one boat at a time\r\n     * BayBlock for all the other boats as they spawn.\r\n     */\r\n    render() {\r\n        return (\r\n            <MainHarbour>\r\n                <DockBlock/>\r\n                <HarbourBlock boatList={this.state.harbourBoat}/>\r\n                <BayBlock boatList={this.state.BayList} />\r\n            </MainHarbour>\r\n        )\r\n    }\r\n} \r\n\r\nexport default Main","import React from 'react';\nimport './App.scss';\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}